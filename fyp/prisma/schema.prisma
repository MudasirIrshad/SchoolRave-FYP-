generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SchoolType {
  GOVERNMENT
  PRIVATE
  SEMI_GOVERNMENT
}

enum CurriculumType {
  FEDERAL
  BALUCHISTAN
}

enum AdmissionStatus {
  OPEN
  CLOSED
}

enum GenderPolicy {
  CO_EDUCATION
  BOYS_ONLY
  GIRLS_ONLY
}

enum UserRole {
  SCHOOL
  GENERAL
  ADMIN
}

enum SubscriptionPlan {
  THREE_MONTH
  SIX_MONTH
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum SubscriptionType {
  FREE
  PAID
}

enum AdmissionApproval {
  PENDING
  APPROVED
  REJECTED
}

// DATABASE MODELS

model School {
  id                    String  @id @default(uuid())
  name                  String
  email                 String  @unique
  phone                 String? @unique
  address               String?
  medium_of_instruction String?
  imageUrl              String?
  description           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptionType SubscriptionType @default(FREE)
  stripeCustomerId String?          @unique

  school_type     SchoolType?
  curriculum_type CurriculumType?

  schoolBranch   SchoolBranch[]
  class_base_fee Class_base_fee[]
  reviews        Review[]

  subscription Subscription[]

  userId String

  Payment Payment[]

  Admission Admission[]

  @@unique([userId])
}

model SchoolBranch {
  id               String          @id @default(uuid())
  name             String?
  address          String?
  city             String?
  email            String?         @unique
  phone            String?         @unique
  description      String?
  admission_status AdmissionStatus? @default(OPEN)

  gender_policy GenderPolicy? @default(CO_EDUCATION)

  facilities String?
  

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  class_base_fee Class_base_fee[]
  reviews        Review[]
}

model Class_base_fee {
  id            String @id @default(uuid())
  name          String
  admission_fee Int
  monthly_fee   Int

  schoolBranchId String?
  schoolBranch   SchoolBranch? @relation(fields: [schoolBranchId], references: [id], onDelete: Cascade)

  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([name, schoolId])
}

model User {
  id String @id @default(uuid()) // primary key

  name  String
  email String @unique

  password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role    UserRole
  reviews Review[]

  payment Payment[]

  Admission Admission[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  schoolBranchId String?
  schoolBranch   SchoolBranch? @relation(fields: [schoolBranchId], references: [id], onDelete: Cascade)

  reviewerId String?
  reviewer   User?   @relation(fields: [reviewerId], references: [id])

  @@unique([reviewerId, schoolId])
}

model Subscription {
  id     String             @id @default(uuid())
  status SubscriptionStatus // active, expired, cancelled
  type   SubscriptionType // free, paid

  createdAt DateTime @default(now())

  startDate DateTime @default(now())
  endDate   DateTime

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  payment Payment[]

  @@unique([schoolId])
}

model Payment {
  id     String @id @default(uuid())
  amount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptionId String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([subscriptionId, schoolId, userId])
}

model Admission {
  id            String            @id @default(uuid())
  student_name  String
  student_age   Int
  date_of_birth DateTime
  image_url     String
  approval      AdmissionApproval

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  submitterId String
  submitter   User   @relation(fields: [submitterId], references: [id], onDelete: Cascade)

  documents Document[]

  @@unique([submitterId, schoolId])
}

model Document {
  id        String   @id @default(uuid())
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admissionId String
  admission   Admission @relation(fields: [admissionId], references: [id], onDelete: Cascade)
}
